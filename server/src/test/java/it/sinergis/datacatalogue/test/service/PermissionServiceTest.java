/*
 * Created on 18 dic 2015 ( Time 16:29:07 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package it.sinergis.datacatalogue.test.service;

import java.io.IOException;

import org.junit.Assert;
import org.junit.Test;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import it.sinergis.datacatalogue.common.Constants;
import it.sinergis.datacatalogue.exception.DCException;
import it.sinergis.datacatalogue.services.DatasetsService;
import it.sinergis.datacatalogue.services.DatasourcesService;
import it.sinergis.datacatalogue.services.FunctionsService;
import it.sinergis.datacatalogue.services.LayersService;
import it.sinergis.datacatalogue.services.OrganizationsService;
import it.sinergis.datacatalogue.services.PermissionsService;
import it.sinergis.datacatalogue.services.RolesService;
import it.sinergis.datacatalogue.services.ServiceCommons;

/**
 * JUnit test case for Gsc005PermissionService persistence service
 * 
 * @author Telosys Tools Generator
 *
 */
public class PermissionServiceTest extends ServiceCommons {
	
	/** SETUP REQUESTS. */
	public static final String CREATE_ORG_REQ = "{\"organizationname\":\"TestOrgForPermission\",\"description\":\"Create org test\"}";
	public static final String CREATE_DS_REQ = "{\"datasourcename\":\"DSShapeTestForPermission\",\"type\":\"SHAPE\",\"description\":\"SHAPE file\",\"updated\":\"true\",\"path\":\"T:\\\\MDeMeo\\\\dati\\\\bologna\\\\shape\\\\\",\"organization\":\"%ID_ORG%\"}";
	public static final String CREATE_DST_REQ = "{\"datasetname\": \"datasetSHAPETestForPermission\",\"realname\": \"zone.shp\",\"description\": \"descrizione\",\"iddatasource\":\"%ID_DS%\"}";
	public static final String CREATE_LYR_REQ = "{\"layername\":\"layerTestForPermission\",\"description\":\"unit test for layer creation\",\"iddataset\":\"%ID_DST%\"}";
	public static final String CREATE_FUNC_REQ = "{\"functionname\":\"TestFunctionForPermission\",\"organization\":\"%ID_ORG%\",\"type\":\"test\",\"description\":\"Create test permission success\"}";	
	public static final String CREATE_ROLE_REQ = "{\"rolename\":\"TestRoleForPermission\",\"description\":\"Unit test example\",\"organization\":\"%ID_ORG%\"}";
	
	/** PERMISSION REQUESTS. */
	public static final String ASSIGN_PERMISSION_REQ = "{\"idrole\":\"%ID_ROLE%\",\"name\":\"nomepermesso?\",\"functions\":[{\"idfunction\":\"%ID_FUNC%\",\"idlayer\":\"%ID_LYR%\"}]}";
	public static final String LIST_PERMISSION_REQ = "{\"idrole\":\"%ID_ROLE%\"}";
	/** CLEANUP REQUESTS. */
	public static final String DELETE_ORG_REQ = "{\"idorganization\":\"%ID_ORG%\"}";
	
	/** Object Mapper. */
	private ObjectMapper om = new ObjectMapper();

	/** lyr. Service. */
	private LayersService lyr_service = new LayersService();
	
	/** ds. Service. */
	private DatasourcesService ds_service = new DatasourcesService();
	
	/** dst. Service. */
	private DatasetsService dst_service = new DatasetsService();
	
	/** org. service. */
	private OrganizationsService org_service = new OrganizationsService();
	
	/** role service. */
	private RolesService role_service = new RolesService();
	
	/** function service. */
	private FunctionsService func_service = new FunctionsService();

	/** permission service. */
	private PermissionsService permission_service = new PermissionsService();

	/** Role id */
	private Long role_id = null;
	/** Role id */
	private Long lyr_id = null;
	/** Role id */
	private Long func_id = null;
	
	private String createOrg(String req) {
		return org_service.createOrganization(req);
	}
	
	private void deleteOrgRecord(Long id) {
		org_service.deleteOrganization(DELETE_ORG_REQ.replaceAll("%ID_ORG%",id.toString()));
	}
	
	private String createDS(String req) {
		return ds_service.createDatasource(req);
	}
	
	private String createDST(String req) {
		return dst_service.createDataset(req);
	}
	
	private String createLYR(String req) {
		return lyr_service.createLayer(req);
	}
	
	private String createFunc(String req) {
		return func_service.createFunction(req);
	}
	
	private String createRole(String req) {
		return role_service.createRole(req);
	}
	
	private String assignPermission(String req) {
		return permission_service.assignPermission(req);
	}
	
	private String listPermission(String req) {
		return permission_service.listPermission(req);
	}
	
	private Long getRecordId(String response) throws NumberFormatException, DCException {
		return Long.parseLong(getFieldValueFromJsonText(response,Constants.ID_FIELD));
	}
	
	private Long doSetup() throws NumberFormatException, DCException {
		//create an organization record
		String create_org_response = createOrg(CREATE_ORG_REQ);
		System.out.println("CREATE_ORG_RESPONSE:");
		System.out.println(create_org_response);
		
		Long org_id = getRecordId(create_org_response);
		
		//create a datasource record for that organization
		String create_ds_response = createDS(CREATE_DS_REQ.replaceAll("%ID_ORG%",org_id.toString()));
		System.out.println("CREATE_DS_RESPONSE:");
		System.out.println(create_ds_response);
		//create a dataset record for that datasource
		String create_dst_response = createDST(CREATE_DST_REQ.replaceAll("%ID_DS%",getRecordId(create_ds_response).toString()));
		System.out.println("CREATE_DST_RESPONSE:");
		System.out.println(create_dst_response);
		//create a layer record for the created dataset
		String create_lyr_response = createLYR(CREATE_LYR_REQ.replaceAll("%ID_DST%",getRecordId(create_dst_response).toString()));
		System.out.println("CREATE_LYR_RESPONSE:");
		System.out.println(create_lyr_response);
		
		//create the test function linked to the organization
		String create_func_response = createFunc(CREATE_FUNC_REQ.replaceAll("%ID_ORG%", org_id.toString()));
		System.out.println("CREATE_FUNC_RESPONSE:");
		System.out.println(create_func_response);
		

		//call the create role service
		String create_role_response = createRole(CREATE_ROLE_REQ.replaceAll("%ID_ORG%",org_id.toString()));
		System.out.println("CREATE_ROLE_RESPONSE:");
		System.out.println(create_role_response);	
		
		this.func_id = getRecordId(create_func_response);
		this.lyr_id = getRecordId(create_lyr_response);
		this.role_id = getRecordId(create_role_response);

		//return the organization id
		return org_id;
	}
	
	private void successAssertChecks(String response) throws JsonProcessingException, IOException {
		//check if response is a well formed json	
		om.readTree(response);
		//Assert the json response does not have an error field
		Assert.assertTrue(!response.contains("\"status\":\"error\""));
	}
	
	private void faliureAssertChecks(String response) throws JsonProcessingException, IOException {
		//check if response is a well formed json	
		om.readTree(response);
		//Assert the json response has an error field
		Assert.assertTrue(response.contains("\"status\":\"error\""));
	}
	
	/**
	 *  This test is the basic assign permission test. 
	 *  The response will be checked to be without errors.
	 */
	@Test
	public void assignPermissionTest() {
		System.out.println("TEST STARTED: assignPermissionTest()");
		Long org_id = null;
		try {
			org_id = doSetup();
			
			//call the assign permission service
			String assign_permission_response = assignPermission(ASSIGN_PERMISSION_REQ.replaceAll("%ID_LYR%",lyr_id.toString()).replaceAll("%ID_FUNC%",func_id.toString()).replaceAll("%ID_ROLE%", role_id.toString()));
			System.out.println("ASSIGN_PERMISSION_RESPONSE:");
			System.out.println(assign_permission_response);	
					
			successAssertChecks(assign_permission_response);
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			deleteOrgRecord(org_id);
			System.out.println("TEST ENDED: assignPermissionTest()");
		}
	}
	
	/**
	 *  This test is an assign permission error test.
	 *  The response will be checked, and it should contain an error.
	 *  This should trigger error ER501,ER503,ER504
	 *  ER501: "Incorrect parameters: requested role does not exist."
	 *  ER503: "Incorrect parameters: one of the requested functions does not exist. Check if the correct ids were used."
	 *  ER504: "Incorrect parameters: one of the requested layers does not exist. Check if the correct ids were used."
	 *  
	 */
	@Test
	public void assignPermissionTestFail() {
		System.out.println("TEST STARTED: assignPermissionTestFail()");
		Long org_id = null;
		try {
			org_id = doSetup();
			
			//call the assign permission service (Wrong role id)
			String assign_permission_response = assignPermission(ASSIGN_PERMISSION_REQ.replaceAll("%ID_LYR%",lyr_id.toString()).replaceAll("%ID_FUNC%",func_id.toString()).replaceAll("%ID_ROLE%", new Long(role_id+1).toString()));
			System.out.println("ASSIGN_PERMISSION_RESPONSE:");
			System.out.println(assign_permission_response);		
			faliureAssertChecks(assign_permission_response);
			
			//call the assign permission service (Wrong function id)
			String assign_permission_response_2 = assignPermission(ASSIGN_PERMISSION_REQ.replaceAll("%ID_LYR%",lyr_id.toString()).replaceAll("%ID_FUNC%",new Long(func_id+1).toString()).replaceAll("%ID_ROLE%", role_id.toString()));
			System.out.println("ASSIGN_PERMISSION_RESPONSE:");
			System.out.println(assign_permission_response_2);		
			faliureAssertChecks(assign_permission_response_2);
			
			//call the assign permission service (Wrong layer id)
			String assign_permission_response_3 = assignPermission(ASSIGN_PERMISSION_REQ.replaceAll("%ID_LYR%",new Long(lyr_id+1).toString()).replaceAll("%ID_FUNC%",func_id.toString()).replaceAll("%ID_ROLE%", role_id.toString()));
			System.out.println("ASSIGN_PERMISSION_RESPONSE:");
			System.out.println(assign_permission_response_3);		
			faliureAssertChecks(assign_permission_response_3);
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			deleteOrgRecord(org_id);
			System.out.println("TEST ENDED: assignPermissionTestFail()");
		}
	}
	
	/**
	 *  This test is the basic list permission test. 
	 *  The response will be checked to be without errors.
	 */
	@Test
	public void listPermissionTest() {
		System.out.println("TEST STARTED: listPermissionTest()");
		Long org_id = null;
		try {
			org_id = doSetup();
			
			//call the assign permission service
			String assign_permission_response = assignPermission(ASSIGN_PERMISSION_REQ.replaceAll("%ID_LYR%",lyr_id.toString()).replaceAll("%ID_FUNC%",func_id.toString()).replaceAll("%ID_ROLE%", role_id.toString()));
			System.out.println("ASSIGN_PERMISSION_RESPONSE:");
			System.out.println(assign_permission_response);	
			
			//call the list permission request
			String list_permission_response = listPermission(LIST_PERMISSION_REQ.replaceAll("%ID_ROLE%",role_id.toString()));
			System.out.println("LIST_PERMISSION_RESPONSE:");
			System.out.println(list_permission_response);	
					
			successAssertChecks(list_permission_response);
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			deleteOrgRecord(org_id);
			System.out.println("TEST ENDED: listRoleTest()");
		}
	}
//	
//	/**
//	 *  This test is a list permission error test.
//	 *  The response will be checked, and it should contain an error.
//	 *  //no peculiar error to show
//	 *  
//	 */
//	@Test
//	public void listPermissionTestFail() {
//		System.out.println("TEST STARTED: listPermissionTestFail()");
//		Long org_id = null;
//		try {
//			org_id = doSetup();
//			
//			//call the list permission request
//			String list_permission_response = listPermission(LIST_PERMISSION_REQ.replaceAll("%ID_ROLE%",role_id.toString()));
//			System.out.println("LIST_PERMISSIOn_RESPONSE:");
//			System.out.println(list_permission_response);	
//					
//			successAssertChecks(list_permission_response);
//			
//		} catch (Exception e) {
//			System.out.println(e);
//			Assert.fail();
//		} finally {
//			//cleanup (delete the just inserted records)
//			deleteOrgRecord(org_id);
//			System.out.println("TEST ENDED: listPermissionTestFail()");
//		}
//	}

}