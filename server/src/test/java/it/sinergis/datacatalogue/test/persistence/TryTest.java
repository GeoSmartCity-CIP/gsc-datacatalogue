/*
 * Created on 18 dic 2015 ( Time 16:29:07 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package it.sinergis.datacatalogue.test.persistence;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.geotools.data.DataStore;
import org.geotools.data.DataStoreFinder;
import org.junit.Test;
import org.opengis.feature.simple.SimpleFeatureType;
import org.opengis.feature.type.AttributeDescriptor;

import com.fasterxml.jackson.databind.ObjectMapper;

import it.sinergis.datacatalogue.common.Constants;

/**
 * JUnit test case for Gsc007Dataset persistence service
 * 
 * @author Telosys Tools Generator
 *
 */
public class TryTest {
	// @Test
	public void test1() throws Exception {

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("dbtype", "postgis");
		map.put("host", "gsm-db.nco.inet");
		map.put("port", 5432);
		map.put("schema", "public");
		map.put("database", "postgres");
		map.put("user", "postgres");
		map.put("passwd", "postgres");

		System.out.println(buildJSONFromMapOptions2(map));

	}

	private static String buildJSONFromMapOptions2(Map<String, Object> map) throws IOException {

		DataStore dataStore = DataStoreFinder.getDataStore(map);

		SimpleFeatureType type = dataStore.getSchema("CO2_passenger_cars_v9");
		System.out.println("featureType  name: " + type.getName());
		System.out.println("featureType count: " + type.getAttributeCount());

		System.out.println("featuretype attributes list:");
		// access by list
		for (AttributeDescriptor descriptor : type.getAttributeDescriptors()) {
			System.out.print("  " + descriptor.getName());
			System.out.print(" (" + descriptor.getMinOccurs() + "," + descriptor.getMaxOccurs() + ",");
			System.out.print((descriptor.isNillable() ? "nillable" : "manditory") + ")");
			System.out.print(" type: " + descriptor.getType().getName());
			System.out.println(" binding: " + descriptor.getType().getBinding().getSimpleName());
		}
		return "";

	}

	//@Test
	public void test2() throws Exception {
		File file = new File("D:\\dati\\bologna\\shape");
		
		file.isFile();
		file.isDirectory();

		File[] listOfFiles = file.listFiles(new FilenameFilter() {

			@Override
			public boolean accept(File dir, String name) {
				return name.endsWith(".shp");
			}
		});

		ObjectMapper om = new ObjectMapper();
		Map<String, Object> mapColumns = new HashMap<>();
		
		List<Map<String, Object>> listaValori = new ArrayList<>();
		
		for (File contained : listOfFiles) {
//			System.out.println("File " + contained.getName() + " " + contained.getAbsolutePath());
			
			Map<String, Object> mappaValori = new HashMap<>();
			mappaValori.put(Constants.NAME, contained.getName());
			mappaValori.put(Constants.PATH, contained.getAbsolutePath());
			listaValori.add(mappaValori);
		}
		
		mapColumns.put("dataorigin", listaValori);
		
		String ritorno = om.writeValueAsString(mapColumns);
		
		System.out.println(ritorno);
	}

}
