/*
 * Created on 18 dic 2015 ( Time 16:29:06 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package it.sinergis.datacatalogue.test.service;


import org.junit.Assert;
import org.junit.Test;

import com.fasterxml.jackson.databind.ObjectMapper;

import it.sinergis.datacatalogue.common.Constants;
import it.sinergis.datacatalogue.exception.DCException;
import it.sinergis.datacatalogue.services.DatasourcesService;
import it.sinergis.datacatalogue.services.OrganizationsService;
import it.sinergis.datacatalogue.services.ServiceCommons;

/**
 * JUnit test case for Gsc001Organization service
 * 
 * @author Telosys Tools Generator
 *
 */
public class DatasourceServiceTest extends ServiceCommons 
{
	
	/** Object Mapper. */
	private ObjectMapper om = new ObjectMapper();
	
	/** ds. Service. */
	private DatasourcesService ds_service = new DatasourcesService();

	/** org. service. */
	private OrganizationsService org_service = new OrganizationsService();
	
	//create org request
	public static final String CREATE_ORG_REQ_1 = "{\"organizationname\":\"TestOrg\",\"description\":\"Create test succeed\"}";
	
	//create ds request
	public static final String CREATE_DS_REQ_1 = "{\"datasourcename\":\"DSShapeTest\",\"type\":\"SHAPE\",\"description\":\"SHAPE file\",\"updated\":\"true\",\"path\":\"T:\\\\MDeMeo\\\\dati\\\\bologna\\\\shape\\\\\",\"organization\":";
	public static final String CREATE_DS_REQ_2 = "{\"datasourcename\":\"DSShapeTestUpdated\",\"type\":\"SHAPE\",\"description\":\"SHAPE file\",\"updated\":\"true\",\"path\":\"D:\\\\dati\\\\bologna\\\\shape\\\\\",\"organization\":";
	public static final String CREATE_DS_REQ_3 = "{\"datasourcename\":\"DSPostgisTestUnit\",\"type\":\"POSTGIS\",\"description\":\"Postgis descript\",\"updated\":\"true\",\"url\":\"gsm-db.nco.inet\",\"schema\":\"gscdatacatalogue\",\"username\":\"gscdatacatalogue\",\"password\":\"gscdatacatalogue\",\"port\":\"5432\",\"organization\":";
	//create request for the update service test
	public static final String CREATE_ORG_REQ_2 = "{\"organizationname\":\"TestOrgForUpdate\",\"description\":\"When we update another record org name to this service fails.\"}";
	//delete org request
	public static final String DELETE_ORG_REQ_1 = "{\"idorganization\":";
	//delete ds request
	public static final String DELETE_DS_REQ_1 = "{\"iddatasource\":";	
	//update ds request
	public static final String UPDATE_DS_REQ_1 = "{\"datasourcename\":\"DSShapeTest\",\"type\":\"SHAPE\",\"description\":\"SHAPE file test\",\"updated\":\"true\",\"path\":\"D:\\\\dati\\\\bologna\\\\shape\\\\\",\"organization\":";
	public static final String UPDATE_DS_REQ_1_PART_2 = ",\"iddatasource\":";
	//Search ds requests
	public static final String READ_DS_REQ_1 = "{\"detail\":\"true\",\"iddatasource\":";
	public static final String READ_DS_REQ_2 = "{\"detail\":\"true\",\"datasourcename\":\"Shape\",\"organization\":";
	//none of the mandatory parameter is specified
	public static final String READ_DS_REQ_3 = "{\"detail\":\"true\",\"datasourcename\":\"Shape\"}";
	//a request can't contain both organization and iddatasource parameters
	public static final String READ_DS_REQ_4 = "{\"detail\":\"true\",\"datasourcename\":\"Shape\",\"organization\":";
	public static final String READ_DS_REQ_4_PART_2 = ",\"iddatasource\":";
	//none of the mandatory parameter is specified
	public static final String READ_DS_REQ_5 = "{\"detail\":\"NEITHERTRUEORFALSE\",\"iddatasource\":";
	
	//delete ds request
	public static final String LIST_DATA_ORIGIN_REQ = "{\"iddatasource\":";	

	//request end
	public static final String REQ_END = "}";
	
	private void deleteOrgRecord(Long id) {
		org_service.deleteOrganization(buildIdRequest(DELETE_ORG_REQ_1,id));
	}
	
//	private void deleteDsRecord(Long id) {
//		ds_service.deleteDatasource(buildIdRequest(DELETE_DS_REQ_1,id));
//	}
	
	private String createOrgRecord(String req) {
		return org_service.createOrganization(req);
	}
	
	private String createDSRecord(String req) {
		return ds_service.createDatasource(req);
	}
	
	private Long getRecordId(String response) throws NumberFormatException, DCException {
		return Long.parseLong(getFieldValueFromJsonText(response,Constants.ID_FIELD));
	}
	
	private String buildIdRequest(String reqBegin,Long id) {
		return reqBegin+id+REQ_END;
	}
	
	private String buildIdRequest(String reqBegin,String reqPart2,Long id_1,Long id_2) {
		return reqBegin+id_1+reqPart2+id_2+REQ_END;
	}
	

	@Test
	public void createDSTest() {
		System.out.println("TEST STARTED: createDSTest()");
		Long create_org_id = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to the newly created org
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,getRecordId(create_org_response)));
			System.out.println(create_ds_response);

			//check if response is a well formed json	
			om.readTree(create_ds_response);
			//Assert the json response does not have an error field
			Assert.assertTrue(!create_ds_response.contains("\"status\":\"error\""));
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			// later on the delete org should handle the ds deletion as well
			deleteOrgRecord(create_org_id);
			//deleteDsRecord(create_ds_id);
			System.out.println("TEST ENDED: createDSTest()");
		}
	}
	
	@Test
	public void createDSTestFail() {
		System.out.println("TEST STARTED: createDSTestFail()");
		Long create_org_id = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to the newly created org
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,getRecordId(create_org_response)));
			System.out.println(create_ds_response);

			//try to create another record with the same name 
			String create_ds_response_2 = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,getRecordId(create_org_response)));
			System.out.println(create_ds_response_2);
			
			//check if response is a well formed json	
			om.readTree(create_ds_response);
			//Assert the json response has an error field
			Assert.assertTrue(create_ds_response_2.contains("\"status\":\"error\""));
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			// later on the delete org should handle the ds deletion as well
			deleteOrgRecord(create_org_id);
			//deleteDsRecord(create_ds_id);
			System.out.println("TEST ENDED: createDSTestFail()");
		}
	}
	
	@Test
	public void createDSTestFail2() {
		System.out.println("TEST STARTED: createDSTestFail2()");
		Long create_org_id = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to a NON EXISTING organization
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,create_org_id+1));
			System.out.println(create_ds_response);
			
			//check if response is a well formed json	
			om.readTree(create_ds_response);
			//Assert the json response has an error field
			Assert.assertTrue(create_ds_response.contains("\"status\":\"error\""));
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			// later on the delete org should handle the ds deletion as well
			deleteOrgRecord(create_org_id);
			System.out.println("TEST ENDED: createDSTestFail2()");
		}
	}
	
	
	@Test
	public void updateDSTest() {
		System.out.println("TEST STARTED: updateDSTest()");
		Long create_org_id = null;
		Long create_ds_id = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to the newly created org
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,create_org_id));
			System.out.println(create_ds_response);
			//get its id
			create_ds_id = getRecordId(create_ds_response);
			
			//Update the record
			String update_ds_response = ds_service.updateDatasource((buildIdRequest(UPDATE_DS_REQ_1,UPDATE_DS_REQ_1_PART_2,create_org_id,create_ds_id)));
			System.out.println(update_ds_response);
			//check if response is a well formed json	
			om.readTree(update_ds_response);
			//Assert the json response does not have an error field
			Assert.assertTrue(!update_ds_response.contains("\"status\":\"error\""));
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			// later on the delete org should handle the ds deletion as well
			deleteOrgRecord(create_org_id);
			//deleteDsRecord(create_ds_id);
			System.out.println("TEST ENDED: updateDSTest()");
		}
	}
	
	@Test
	public void updateDSTestFail() {
		System.out.println("TEST STARTED: updateDSTestFail()");
		Long create_org_id = null;
		Long create_ds_id = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to the newly created org
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,getRecordId(create_org_response)));
			System.out.println(create_ds_response);
			//get its id
			create_ds_id = getRecordId(create_ds_response);
			
			//Update the record (using a wrong ds id)
			String update_ds_response = ds_service.updateDatasource((buildIdRequest(UPDATE_DS_REQ_1,UPDATE_DS_REQ_1_PART_2,create_org_id,create_ds_id+1)));
			System.out.println(update_ds_response);
			//check if response is a well formed json	
			om.readTree(update_ds_response);
			//Assert the json response has an error field
			Assert.assertTrue(update_ds_response.contains("\"status\":\"error\""));
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			// later on the delete org should handle the ds deletion as well
			deleteOrgRecord(create_org_id);
			//deleteDsRecord(create_ds_id);
			System.out.println("TEST ENDED: updateDSTestFail()");
		}
	}
	
	@Test
	public void updateTestFail2() {
		System.out.println("TEST STARTED: updateDSTestFail2()");
		Long create_org_id = null;
		Long create_ds_id_2 = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to the newly created org
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,create_org_id));
			System.out.println(create_ds_response);
			
			//create the ds linked to the newly created org
			String create_ds_response2 = createDSRecord(buildIdRequest(CREATE_DS_REQ_2,create_org_id));
			System.out.println(create_ds_response2);
			//get its id
			create_ds_id_2 = getRecordId(create_ds_response2);
			
			//try to update the second record giving it the name of the first one
			String update_ds_response = ds_service.updateDatasource((buildIdRequest(UPDATE_DS_REQ_1,UPDATE_DS_REQ_1_PART_2,create_org_id,create_ds_id_2)));
			System.out.println(update_ds_response);
			//check if response is a well formed json	
			om.readTree(update_ds_response);
			//Assert the json response has an error field
			Assert.assertTrue(update_ds_response.contains("\"status\":\"error\""));
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			// later on the delete org should handle the ds deletion as well
			deleteOrgRecord(create_org_id);
			//deleteDsRecord(create_ds_id);
			//deleteDsRecord(create_ds_id_2);
			System.out.println("TEST ENDED: updateDSTestFail2()");
		}
	}
	
	@Test
	public void deleteDSTest() {
		System.out.println("TEST STARTED: deleteDSTest()");
		Long create_org_id = null;
		Long create_ds_id = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to the newly created org
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,getRecordId(create_org_response)));
			System.out.println(create_ds_response);
			//get its id
			create_ds_id = getRecordId(create_ds_response);
			
			//delete the record
			String delete_ds_response = ds_service.deleteDatasource(buildIdRequest(DELETE_DS_REQ_1,create_ds_id));
			System.out.println(delete_ds_response);
			//check if response is a well formed json	
			om.readTree(delete_ds_response);
			//Assert the json response does not have an error field
			Assert.assertTrue(!delete_ds_response.contains("\"status\":\"error\""));
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			// later on the delete org should handle the ds deletion as well
			deleteOrgRecord(create_org_id);
			System.out.println("TEST ENDED: deleteDSTest()");
		}
	}
	
	@Test
	public void deleteDSTestFail() {
		System.out.println("TEST STARTED: deleteDSTestFail()");
		Long create_org_id = null;
		Long create_ds_id = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to the newly created org
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,getRecordId(create_org_response)));
			System.out.println(create_ds_response);
			//get its id
			create_ds_id = getRecordId(create_ds_response);
			
			//attempt to delete a non-existing record
			String delete_ds_response = ds_service.deleteDatasource(buildIdRequest(DELETE_DS_REQ_1,create_ds_id+1));
			System.out.println(delete_ds_response);
			//check if response is a well formed json	
			om.readTree(delete_ds_response);
			//Assert the json response has an error field
			Assert.assertTrue(delete_ds_response.contains("\"status\":\"error\""));
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			// later on the delete org should handle the ds deletion as well
			deleteOrgRecord(create_org_id);
			//deleteDsRecord(create_ds_id);
			System.out.println("TEST ENDED: deleteDSTestFail()");
		}
	}
	
	@Test
	public void readDSTest() {
		System.out.println("TEST STARTED: readDSByIdTest()");
		Long create_org_id = null;
		Long create_ds_id = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to the newly created org
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,getRecordId(create_org_response)));
			System.out.println(create_ds_response);
			//get its id
			create_ds_id = getRecordId(create_ds_response);
			
			//research by id
			String read_ds_response = ds_service.listDatasource(buildIdRequest(READ_DS_REQ_1,create_ds_id));
			System.out.println(read_ds_response);
			//check if response is a well formed json	
			om.readTree(read_ds_response);
			//Assert the json response does not have an error field
			Assert.assertTrue(!read_ds_response.contains("\"status\":\"error\""));
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			// later on the delete org should handle the ds deletion as well
			deleteOrgRecord(create_org_id);
			//deleteDsRecord(create_ds_id);
			System.out.println("TEST ENDED: readDSByIdTest()");
		}
	}
	
	@Test
	public void readDSTest2() {
		System.out.println("TEST STARTED: readDSByOrganizationTest()");
		Long create_org_id = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to the newly created org
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,getRecordId(create_org_response)));
			System.out.println(create_ds_response);
			
			//research by orgname (and datasource name)
			String read_ds_response = ds_service.listDatasource(buildIdRequest(READ_DS_REQ_2,create_org_id));
			System.out.println(read_ds_response);
			//check if response is a well formed json	
			om.readTree(read_ds_response);
			//Assert the json response does not have an error field
			Assert.assertTrue(!read_ds_response.contains("\"status\":\"error\""));
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			// later on the delete org should handle the ds deletion as well
			deleteOrgRecord(create_org_id);
			//deleteDsRecord(create_ds_id);
			System.out.println("TEST ENDED: readDSByOrganizationTest()");
		}
	}
	
	@Test
	public void readDSTestFail() {
		System.out.println("TEST STARTED: readDSTestFail()");
		Long create_org_id = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to the newly created org
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,create_org_id));
			System.out.println(create_ds_response);
			
			//research by id
			String read_ds_response = ds_service.listDatasource(READ_DS_REQ_3);
			System.out.println(read_ds_response);
			//check if response is a well formed json	
			om.readTree(read_ds_response);
			//Assert the json response has an error field
			Assert.assertTrue(read_ds_response.contains("\"status\":\"error\""));
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			// later on the delete org should handle the ds deletion as well
			deleteOrgRecord(create_org_id);
			//deleteDsRecord(create_ds_id);
			System.out.println("TEST ENDED: readDSTestFail()");
		}
	}
	
	@Test
	public void readDSTestFail2() {
		System.out.println("TEST STARTED: readDSTestFail2()");
		Long create_org_id = null;
		Long create_ds_id = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to the newly created org
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,create_org_id));
			System.out.println(create_ds_response);
			//get its id
			create_ds_id = getRecordId(create_ds_response);
			
			//research including incompatible parameters
			String read_ds_response = ds_service.listDatasource(buildIdRequest(READ_DS_REQ_4,READ_DS_REQ_4_PART_2,create_org_id,create_ds_id));
			System.out.println(read_ds_response);
			//check if response is a well formed json	
			om.readTree(read_ds_response);
			//Assert the json response has an error field
			Assert.assertTrue(read_ds_response.contains("\"status\":\"error\""));
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			// later on the delete org should handle the ds deletion as well
			deleteOrgRecord(create_org_id);
			//deleteDsRecord(create_ds_id);
			System.out.println("TEST ENDED: readDSTestFail2()");
		}
	}
	
	@Test
	public void readDSTestFail3() {
		System.out.println("TEST STARTED: readDSTestFail3()");
		Long create_org_id = null;
		Long create_ds_id = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to the newly created org
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,create_org_id));
			System.out.println(create_ds_response);
			//get its id
			create_ds_id = getRecordId(create_ds_response);
			
			//research with wrong detail value (it can be omitted or it can be true or false)
			String read_ds_response = ds_service.listDatasource(buildIdRequest(READ_DS_REQ_5,create_ds_id));
			System.out.println(read_ds_response);
			//check if response is a well formed json	
			om.readTree(read_ds_response);
			//Assert the json response has an error field
			Assert.assertTrue(read_ds_response.contains("\"status\":\"error\""));
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			// later on the delete org should handle the ds deletion as well
			deleteOrgRecord(create_org_id);
			//deleteDsRecord(create_ds_id);
			System.out.println("TEST ENDED: readDSTestFail3()");
		}
	}
	
	@Test
	public void readDSTestFail4() {
		System.out.println("TEST STARTED: readDSTestFail4()");
		Long create_org_id = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to the newly created org
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,create_org_id));
			System.out.println(create_ds_response);
			
			//research by organization (but the given id doesn't exist) -> no results found error
			String read_ds_response = ds_service.listDatasource(buildIdRequest(READ_DS_REQ_2,create_org_id+1));
			System.out.println(read_ds_response);
			//check if response is a well formed json	
			om.readTree(read_ds_response);
			//Assert the json response has an error field
			Assert.assertTrue(read_ds_response.contains("\"status\":\"error\""));
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			// later on the delete org should handle the ds deletion as well
			deleteOrgRecord(create_org_id);
			//deleteDsRecord(create_ds_id);
			System.out.println("TEST ENDED: readDSTestFail4()");
		}
	}
	
	@Test
	public void listDataOriginShape() {
		System.out.println("TEST STARTED: listDataOriginShape()");
		
		Long create_org_id = null;
		Long create_ds_id = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to the newly created org
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_1,create_org_id));
			System.out.println(create_ds_response);
			//get its id
			create_ds_id = getRecordId(create_ds_response);
			
			String listDataOriginResponse = ds_service.listDataOrigin(buildIdRequest(LIST_DATA_ORIGIN_REQ, create_ds_id));
			System.out.println(listDataOriginResponse);
			
			//check if response is a well formed json	
			om.readTree(listDataOriginResponse);
			//Assert the json response has an error field
			Assert.assertTrue(!listDataOriginResponse.contains("\"status\":\"error\""));
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			deleteOrgRecord(create_org_id);
			System.out.println("TEST ENDED: listDataOriginShape()");
		}
		
	}
	
	@Test
	public void listDataOriginPostgis() {
		System.out.println("TEST STARTED: listDataOriginPostgis()");
		
		Long create_org_id = null;
		Long create_ds_id = null;
		try {
			//create an organization record
			String create_org_response = createOrgRecord(CREATE_ORG_REQ_1);
			System.out.println(create_org_response);
			//get its id
			create_org_id = getRecordId(create_org_response);
			
			//create the ds linked to the newly created org
			String create_ds_response = createDSRecord(buildIdRequest(CREATE_DS_REQ_3,create_org_id));
			System.out.println(create_ds_response);
			//get its id
			create_ds_id = getRecordId(create_ds_response);
			
			String listDataOriginResponse = ds_service.listDataOrigin(buildIdRequest(LIST_DATA_ORIGIN_REQ, create_ds_id));
			System.out.println(listDataOriginResponse);
			
			//check if response is a well formed json	
			om.readTree(listDataOriginResponse);
			//Assert the json response has an error field
			Assert.assertTrue(!listDataOriginResponse.contains("\"status\":\"error\""));
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			deleteOrgRecord(create_org_id);
			System.out.println("TEST ENDED: listDataOriginShape()");
		}
		
	}
}