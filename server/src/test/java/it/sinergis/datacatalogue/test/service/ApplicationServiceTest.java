/*
 * Created on 18 dic 2015 ( Time 16:29:06 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package it.sinergis.datacatalogue.test.service;

import org.junit.Assert;
import org.junit.Test;

import com.fasterxml.jackson.databind.ObjectMapper;

import it.sinergis.datacatalogue.common.Constants;
import it.sinergis.datacatalogue.exception.DCException;
import it.sinergis.datacatalogue.services.ApplicationsService;
import it.sinergis.datacatalogue.services.DatasetsService;
import it.sinergis.datacatalogue.services.DatasourcesService;
import it.sinergis.datacatalogue.services.GroupLayersService;
import it.sinergis.datacatalogue.services.LayersService;
import it.sinergis.datacatalogue.services.OrganizationsService;
import it.sinergis.datacatalogue.services.ServiceCommons;

/**
 * JUnit test case for Gsc001Organization service
 * 
 * @author Telosys Tools Generator
 *
 */
public class ApplicationServiceTest extends ServiceCommons {

	/** Object Mapper. */
	private ObjectMapper om = new ObjectMapper();

	/** Service. */
	private ApplicationsService service = new ApplicationsService();
	private OrganizationsService orgService = new OrganizationsService();
	private DatasetsService datasetService = new DatasetsService();
	private DatasourcesService datasourceService = new DatasourcesService();
	private LayersService layerService = new LayersService();
	private GroupLayersService groupLayerService = new GroupLayersService();

	// create request
	public static final String CREATE_APP_REQ_1 = "{\"applicationname\":\"TestApplicationJUNIT\",\"description\":\"Create test succeed\",\"organization\":\"%ORGANIZATIONID%\"}";
	// create request for the update service test
	public static final String CREATE_APP_REQ_2 = "{\"organizationname\":\"TestOrgForUpdate\",\"description\":\"When we update another record org name to this service fails.\"}";
	// Search request
	public static final String READ_APP_REQ_1 = "{\"idapplication\":\"%APPLICATIONID%\"}";
	// create org req
	public static final String CREATE_ORG_REQ_1 = "{\"organizationname\":\"TestOrgForApplication\",\"description\":\"Create test succeed\"}";
	// delete org request
	public static final String DELETE_ORG_REQ_1 = "{\"idorganization\":\"%ORGANIZATIONID%\"}";
	// create datasource
	public static final String CREATE_DATASOURCE_REQ = "{\"datasourcename\":\"DSShapeTestApplicationUnitTest\",\"type\":\"SHAPE\",\"description\":\"SHAPE file\",\"updated\":\"true\",\"path\":\"T:\\\\MDeMeo\\\\dati\\\\bologna\\\\shape\\\\\",\"organization\":\"%ORGANIZATIONID%\"}";
	// create dataset
	public static final String CREATE_DST_REQ = "{\"datasetname\": \"datasetSHAPETestApplicationUnitTest\",\"realname\": \"zone.shp\",\"description\": \"descrizione\",\"iddatasource\":\"%IDDATASOURCE%\"}";
	// create layer
	public static final String CREATE_LYR_REQ_1 = "{\"layername\":\"layer1TestApplicationUnitTest\",\"description\":\"unit test for layer creation\",\"iddataset\":\"%IDDATASET%\"}";
	// create layer
	public static final String CREATE_LYR_REQ_2 = "{\"layername\":\"layer2TestApplicationUnitTest\",\"description\":\"unit test for layer creation\",\"iddataset\":\"%IDDATASET%\"}";
	// create group
	public static final String CREATE_GRP_REQ_1 = "{\"groupname\":\"group1TestApplicationUnitTest\",\"description\":\"unit test for group layer creation\",\"organization\":\"%ORGANIZATIONID%\"}";
	// create group
	public static final String CREATE_GRP_REQ_2 = "{\"groupname\":\"group2TestApplicationUnitTest\",\"description\":\"unit test for group layer creation\",\"organization\":\"%ORGANIZATIONID%\"}";
	// assign to application
	public static final String ASS_TO_APP = "{\"idapplication\":\"%APPLICATIONID%\",\"applicationname\":\"TestApplicationJUNIT\",\"organization\":\"%ORGANIZATIONID%\",\"layers\":[{\"idlayer\":\"%IDLAYER1%\"},{\"idlayer\":\"%IDLAYER2%\"}],\"groups\":[{\"idgroup\":\"%IDGROUP1%\"},{\"idgroup\":\"%IDGROUP2%\"}]}";

	private void deleteRecord(Long id) {
		orgService.deleteOrganization(DELETE_ORG_REQ_1.replace("%ORGANIZATIONID%", id.toString()));
	}

	private Long getRecordId(String response) throws NumberFormatException, DCException {
		return Long.parseLong(getFieldValueFromJsonText(response, Constants.ID_FIELD));
	}

	@Test
	public void createApplication() {
		System.out.println("TEST STARTED: create application test");
		Long createOrgId = null;
		try {
			// CREATE ORGANIZATION
			String createOrgResponse = orgService.createOrganization(CREATE_ORG_REQ_1);
			createOrgId = getRecordId(createOrgResponse);

			// CREATE APPLICATION
			String createAppresponse = service
					.createApplication(CREATE_APP_REQ_1.replace("%ORGANIZATIONID%", createOrgId.toString()));
			System.out.println(createAppresponse);
			Long createAppId = getRecordId(createAppresponse);

			System.out.println("Application created: " + createAppId);
			// check if response is a well formed json
			om.readTree(createAppresponse);
			// Assert the json response does not have an error field
			Assert.assertTrue(!createAppresponse.contains("\"status\":\"error\""));
			System.out.println("TEST SUCCESS");

		} catch (Exception e) {
			System.out.println("TEST FAIL");
			System.out.println(e);
			Assert.fail();
		} finally {
			// cleanup (delete the just inserted record)
			deleteRecord(createOrgId);
			System.out.println("TEST ENDED: create application test");
		}
	}

	@Test
	public void listApplicationByIDTest() {
		System.out.println("TEST STARTED: list application by id test");
		Long createOrgId = null;
		try {
			// CREATE ORGANIZATION
			String createOrgResponse = orgService.createOrganization(CREATE_ORG_REQ_1);
			createOrgId = getRecordId(createOrgResponse);

			// CREATE APPLICATION
			String createAppresponse = service
					.createApplication(CREATE_APP_REQ_1.replace("%ORGANIZATIONID%", createOrgId.toString()));
			System.out.println(createAppresponse);
			Long createAppId = getRecordId(createAppresponse);

			System.out.println("Application created: " + createAppId);
			// check if response is a well formed json
			om.readTree(createAppresponse);
			// Assert the json response does not have an error field
			Assert.assertTrue(!createAppresponse.contains("\"status\":\"error\""));

			// LIST APPLICATION
			String listApplicationResponse = service
					.listApplication(READ_APP_REQ_1.replace("%APPLICATIONID%", createAppId.toString()));
			System.out.println("Application listed: " + listApplicationResponse);

			Assert.assertTrue(!listApplicationResponse.contains("\"status\":\"error\""));

			System.out.println("TEST SUCCESS");

		} catch (Exception e) {
			System.out.println("TEST FAIL");
			System.out.println(e);
			Assert.fail();
		} finally {
			// cleanup (delete the just inserted record)
			deleteRecord(createOrgId);
			System.out.println("TEST ENDED: list application by id test");
		}
	}

	@Test
	public void assignLayerGroupToApplicationTest() {
		System.out.println("TEST STARTED: assign layer/group to application test");
		Long createOrgId = null;
		try {
			// CREATE ORGANIZATION
			String createOrgResponse = orgService.createOrganization(CREATE_ORG_REQ_1);
			createOrgId = getRecordId(createOrgResponse);

			// CREATE APPLICATION
			String createAppresponse = service
					.createApplication(CREATE_APP_REQ_1.replace("%ORGANIZATIONID%", createOrgId.toString()));
			System.out.println(createAppresponse);
			Long createAppId = getRecordId(createAppresponse);

			System.out.println("Application created: " + createAppId);
			// check if response is a well formed json
			om.readTree(createAppresponse);
			// Assert the json response does not have an error field
			Assert.assertTrue(!createAppresponse.contains("\"status\":\"error\""));

			// CREATE DATASOURCE
			String createDatasourceResponse = datasourceService
					.createDatasource(CREATE_DATASOURCE_REQ.replace("%ORGANIZATIONID%", createOrgId.toString()));
			Long createDatasourceId = getRecordId(createDatasourceResponse);
			System.out.println("Datasource created: " + createDatasourceId);
			Assert.assertTrue(!createDatasourceResponse.contains("\"status\":\"error\""));

			// CREATE DATASET
			String createDatasetResponse = datasetService
					.createDataset(CREATE_DST_REQ.replace("%IDDATASOURCE%", createDatasourceId.toString()));
			Long createDatasetId = getRecordId(createDatasetResponse);
			System.out.println("Dataset created: " + createDatasetId);
			Assert.assertTrue(!createDatasetResponse.contains("\"status\":\"error\""));

			// CREATE 2 LAYERS
			String createLayer1Response = layerService
					.createLayer(CREATE_LYR_REQ_1.replace("%IDDATASET%", createDatasetId.toString()));
			Long createLayerID1 = getRecordId(createLayer1Response);
			System.out.println("Layer 1 created: " + createLayerID1);
			Assert.assertTrue(!createLayer1Response.contains("\"status\":\"error\""));

			String createLayer2Response = layerService
					.createLayer(CREATE_LYR_REQ_2.replace("%IDDATASET%", createDatasetId.toString()));
			Long createLayerID2 = getRecordId(createLayer2Response);
			System.out.println("Layer 2 created: " + createLayerID2);
			Assert.assertTrue(!createLayer2Response.contains("\"status\":\"error\""));

			// CREATE 2 GROUPS
			String createGroup1Response = groupLayerService
					.createGroupLayer(CREATE_GRP_REQ_1.replace("%ORGANIZATIONID%", createOrgId.toString()));
			Long createGroupID1 = getRecordId(createGroup1Response);
			System.out.println("Group 1 created: " + createGroupID1);
			Assert.assertTrue(!createGroup1Response.contains("\"status\":\"error\""));

			String createGroup2Response = groupLayerService
					.createGroupLayer(CREATE_GRP_REQ_2.replace("%ORGANIZATIONID%", createOrgId.toString()));
			Long createGroupID2 = getRecordId(createGroup2Response);
			System.out.println("Group 1 created: " + createGroupID2);
			Assert.assertTrue(!createGroup2Response.contains("\"status\":\"error\""));

			// ASSIGN TO APPLICATION
			String assignToAppResponse = service.assignToApplication(ASS_TO_APP.replace("%APPLICATIONID%", createAppId.toString())
					.replace("%ORGANIZATIONID%", createOrgId.toString())
					.replace("%IDLAYER1%", createLayerID1.toString()).replace("%IDLAYER2%", createLayerID2.toString())
					.replace("%IDGROUP1%", createGroupID1.toString()).replace("%IDGROUP2%", createGroupID2.toString()));
			System.out.println("Assigned layer and group to application: " + assignToAppResponse);
			Assert.assertTrue(!assignToAppResponse.contains("\"status\":\"error\""));

			// LIST APPLICATION
			String listApplicationResponse = service
					.listApplication(READ_APP_REQ_1.replace("%APPLICATIONID%", createAppId.toString()));
			System.out.println("Application listed: " + listApplicationResponse);

			Assert.assertTrue(!listApplicationResponse.contains("\"status\":\"error\""));

			System.out.println("TEST SUCCESS");

		} catch (Exception e) {
			System.out.println("TEST FAIL");
			System.out.println(e);
			Assert.fail();
		} finally {
			// cleanup (delete the just inserted record)
			deleteRecord(createOrgId);
			System.out.println("TEST ENDED: assign layer/group to application test by id test");
		}
	}

}