/*
 * Created on 18 dic 2015 ( Time 16:29:07 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package it.sinergis.datacatalogue.test.service;

import java.io.IOException;

import org.junit.Assert;
import org.junit.Test;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import it.sinergis.datacatalogue.common.Constants;
import it.sinergis.datacatalogue.exception.DCException;
import it.sinergis.datacatalogue.services.OrganizationsService;
import it.sinergis.datacatalogue.services.RolesService;
import it.sinergis.datacatalogue.services.ServiceCommons;
import it.sinergis.datacatalogue.services.UsersService;

/**
 * JUnit test case for Gsc002UserService persistence service
 * 
 * @author Telosys Tools Generator
 *
 */
public class RoleServiceTest extends ServiceCommons {
	
	/** SETUP REQUESTS. */
	public static final String CREATE_ORG_REQ = "{\"organizationname\":\"TestOrgForRoleService\",\"description\":\"Create org test\"}";
	public static final String CREATE_ORG_REQ_2 = "{\"organizationname\":\"TestOrgForRoleService2\",\"description\":\"Create org test 2\"}";
	public static final String REGISTER_USER_REQ = "{\"email\":\"Lorenzo.Longhitano@sinergis.it\",\"username\":\"TestUser\",\"password\":\"testPassword\",\"confirmpassword\":\"testPassword\",\"organizations\":[{\"organization\":\"%ID_ORG%\"}]}";
	/** ROLES REQUESTS. */
	public static final String CREATE_ROLE_REQ = "{\"rolename\":\"UnitTestCreateRole\",\"description\":\"Unit test example\",\"organization\":\"%ID_ORG%\"}";
	public static final String CREATE_ROLE_REQ_2 = "{\"rolename\":\"UnitTestCreateRole2\",\"description\":\"Unit test example 2\",\"organization\":\"%ID_ORG%\"}";
	public static final String DELETE_ROLE_REQ = "{\"idrole\":\"%ID_ROLE%\"}";
	public static final String LIST_ROLE_REQ = "{\"rolename\":\"UnitTest\",\"organization\":\"%ID_ORG%\"}";
	public static final String ASSIGN_ROLE_REQ = "{\"idrole\":\"%ID_ROLE%\",\"users\":[{\"iduser\":\"%ID_USER%\"}]}";
	/** CLEANUP REQUESTS. */
	public static final String DELETE_ORG_REQ = "{\"idorganization\":\"%ID_ORG%\"}";
	public static final String DELETE_USER_REQ = "{\"username\":\"TestUser\"}";
	
	/** Object Mapper. */
	private ObjectMapper om = new ObjectMapper();

	/** org. service. */
	private OrganizationsService org_service = new OrganizationsService();
	
	/** role service. */
	private RolesService role_service = new RolesService();
	
	/** user service. */
	private UsersService user_service = new UsersService();

	/** Role id */
	private Long role_id = null;
	
	private String createOrgRecord(String req) {
		return org_service.createOrganization(req);
	}
	
	private void deleteOrgRecord(Long id) {
		org_service.deleteOrganization(DELETE_ORG_REQ.replaceAll("%ID_ORG%",id.toString()));
	}
	
	private String userRegister(String req) {
		return user_service.registerUser(req);
	}
	
	private String deleteUserRecord(String req) {
		return user_service.unregisterUser(req);
	}
	
	private String createRole(String req) {
		return role_service.createRole(req);
	}
	
	private String deleteRole(String req) {
		return role_service.deleteRole(req);
	}
	
	private String listRole(String req) {
		return role_service.listRole(req);
	}
	
	private String assignRole(String req) {
		return role_service.assignRole(req);
	}
	
	private Long getRecordId(String response) throws NumberFormatException, DCException {
		return Long.parseLong(getFieldValueFromJsonText(response,Constants.ID_FIELD));
	}
	
	private Long createUser(Long org_id) throws NumberFormatException, DCException {
		//call the register request
		String user_register_response = userRegister(REGISTER_USER_REQ.replaceAll("%ID_ORG%",org_id.toString()));
		System.out.println("USER_REGISTER_RESPONSE:");
		System.out.println(user_register_response);	
		
		Long user_id = getRecordId(user_register_response);
		
		//VerifyMail needed for roles tests?
//		//retrieve the created record to extract the UUID
//		Gsc002UserEntity user = (Gsc002UserEntity) gsc002Dao.load(user_id);
//		String UUID = getRecordUUID(user.getJson());
//		
//		//call the verify mail method
//		String user_verify_mail_response = userVerifyMail(UUID,user_id.toString());
//		System.out.println("USER_VERIFY_MAIL_RESPONSE:");
//		System.out.println(user_verify_mail_response);	
		
		return user_id;
	}
	
	private Long doSetup(boolean createRole) throws NumberFormatException, DCException {
		//create an organization record
		String create_org_response = createOrgRecord(CREATE_ORG_REQ);
		System.out.println("CREATE_ORG_RESPONSE:");
		System.out.println(create_org_response);
		
		Long org_id = getRecordId(create_org_response);
		
		if(createRole) {
			//call the create role service
			String create_role_response = createRole(CREATE_ROLE_REQ.replaceAll("%ID_ORG%",org_id.toString()));
			System.out.println("CREATE_ROLE_RESPONSE:");
			System.out.println(create_role_response);	
			this.role_id = getRecordId(create_role_response);
		}
		//return the organization id
		return org_id;
	}
	
	private void successAssertChecks(String response) throws JsonProcessingException, IOException {
		//check if response is a well formed json	
		om.readTree(response);
		//Assert the json response does not have an error field
		Assert.assertTrue(!response.contains("\"status\":\"error\""));
	}
	
	private void faliureAssertChecks(String response) throws JsonProcessingException, IOException {
		//check if response is a well formed json	
		om.readTree(response);
		//Assert the json response has an error field
		Assert.assertTrue(response.contains("\"status\":\"error\""));
	}
	
	/**
	 *  This test is the basic create create role test. 
	 *  The response will be checked to be without errors.
	 */
	@Test
	public void createRoleTest() {
		System.out.println("TEST STARTED: createRoleTest()");
		Long org_id = null;
		try {
			org_id = doSetup(false);
			
			//call the create role request
			String create_role_response = createRole(CREATE_ROLE_REQ.replaceAll("%ID_ORG%",org_id.toString()));
			System.out.println("CREATE_ROLE_RESPONSE:");
			System.out.println(create_role_response);	
					
			successAssertChecks(create_role_response);
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			deleteOrgRecord(org_id);
			System.out.println("TEST ENDED: createRoleTest()");
		}
	}
	
	/**
	 *  This test is a create role error test.
	 *  The response will be checked, and it should contain an error.
	 *  This should trigger error ER301,ER15
	 *  ER301: "Role already exists for the specified organization."
	 *  ER15:  " Incorrect parameters: the organization id doesn't exist."
	 *  
	 */
	@Test
	public void createRoleTestFail() {
		System.out.println("TEST STARTED: createRoleTestFail()");
		Long org_id = null;
		try {
			org_id = doSetup(false);
			
			//call the create role service
			String create_role_response = createRole(CREATE_ROLE_REQ.replaceAll("%ID_ORG%",org_id.toString()));
			System.out.println("CREATE_ROLE_RESPONSE:");
			System.out.println(create_role_response);	

			//try to create another role with the same name for the same org.
			String create_role_response_2 = createRole(CREATE_ROLE_REQ.replaceAll("%ID_ORG%",org_id.toString()));
			System.out.println("CREATE_ROLE_RESPONSE:");
			System.out.println(create_role_response_2);	
			faliureAssertChecks(create_role_response_2);
			
			//try to create another role using a non existing org id.
			String create_role_response_3 = createRole(CREATE_ROLE_REQ_2.replaceAll("%ID_ORG%",new Long(org_id+1).toString()));
			System.out.println("CREATE_ROLE_RESPONSE:");
			System.out.println(create_role_response_3);	
			faliureAssertChecks(create_role_response_3);
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			deleteOrgRecord(org_id);
			System.out.println("TEST ENDED: createRoleTestFail()");
		}
	}
	
	/**
	 *  This test is the basic delete role test. 
	 *  The response will be checked to be without errors.
	 */
	@Test
	public void deleteRoleTest() {
		System.out.println("TEST STARTED: deleteRoleTest()");
		Long org_id = null;
		try {
			org_id = doSetup(true);
			
			//call the delete role request
			String delete_role_response = deleteRole(DELETE_ROLE_REQ.replaceAll("%ID_ROLE%",this.role_id.toString()));
			System.out.println("DELETE_ROLE_RESPONSE:");
			System.out.println(delete_role_response);	
					
			successAssertChecks(delete_role_response);
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			deleteOrgRecord(org_id);
			System.out.println("TEST ENDED: deleteRoleTest()");
		}
	}
	
	/**
	 *  This test is a delete role error test.
	 *  The response will be checked, and it should contain an error.
	 *  This should trigger error ER303,ER15
	 *  ER303: "Incorrect parameters: Role to delete doesn't exist."
	 *  
	 */
	@Test
	public void deleteRoleTestFail() {
		System.out.println("TEST STARTED: deleteRoleTestFail()");
		Long org_id = null;
		try {
			org_id = doSetup(true);
			
			//call the delete role request using the wrong id)
			String delete_role_response = deleteRole(DELETE_ROLE_REQ.replaceAll("%ID_ROLE%",new Long(this.role_id+1).toString()));
			System.out.println("DELETE_ROLE_RESPONSE:");
			System.out.println(delete_role_response);	
			
			
			faliureAssertChecks(delete_role_response);
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			deleteOrgRecord(org_id);
			System.out.println("TEST ENDED: deleteRoleTestFail()");
		}
	}
	
	/**
	 *  This test is the basic list role test. 
	 *  The response will be checked to be without errors.
	 */
	@Test
	public void listRoleTest() {
		System.out.println("TEST STARTED: listRoleTest()");
		Long org_id = null;
		try {
			org_id = doSetup(true);
			
			//call the list role request
			String list_role_response = listRole(LIST_ROLE_REQ.replaceAll("%ID_ORG%",org_id.toString()));
			System.out.println("LIST_ROLE_RESPONSE:");
			System.out.println(list_role_response);	
					
			successAssertChecks(list_role_response);
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			deleteOrgRecord(org_id);
			System.out.println("TEST ENDED: listRoleTest()");
		}
	}
	
	/**
	 *  This test is a list role error test.
	 *  The response will be checked, and it should contain an error.
	 *  This should trigger error ER13
	 *  ER13: "No results found."
	 *  
	 */
	@Test
	public void listRoleTestFail() {
		System.out.println("TEST STARTED: listRoleTestFail()");
		Long org_id = null;
		try {
			org_id = doSetup(true);
			
			//call the list role request using the wrong id
			String list_role_response = listRole(LIST_ROLE_REQ.replaceAll("%ID_ORG%",new Long(org_id+1).toString()));
			System.out.println("LIST_ROLE_RESPONSE:");
			System.out.println(list_role_response);	
			faliureAssertChecks(list_role_response);
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			deleteOrgRecord(org_id);
			System.out.println("TEST ENDED: listRoleTestFail()");
		}
	}
	
	/**
	 *  This test is the basic assign user to role test. 
	 *  The response will be checked to be without errors.
	 */
	@Test
	public void assignRoleTest() {
		System.out.println("TEST STARTED: assignRoleTest()");
		Long org_id = null;
		Long user_id = null;
		try {
			org_id = doSetup(true);
			user_id = createUser(org_id);
			//call the assign user to role request
			String assign_role_response = assignRole(ASSIGN_ROLE_REQ.replace("%ID_USER%",user_id.toString()).replace("%ID_ROLE%",this.role_id.toString()));
			System.out.println("ASSIGN_ROLE_RESPONSE:");
			System.out.println(assign_role_response);	
					
			successAssertChecks(assign_role_response);
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			deleteOrgRecord(org_id);
			deleteUserRecord(DELETE_USER_REQ);
			System.out.println("TEST ENDED: assignRoleTest()");
		}
	}
	
	/**
	 *  This test is a assign user to role error test.
	 *  The response will be checked, and it should contain an error.
	 *  This should trigger error ER302,ER304
	 *  ER302: "Incorrect parameters: requested role does not exist."
	 *  ER304: "Incorrect parameters: one of the requested users cannot be assigned to the role because it does not exist."
	 *  
	 */
	@Test
	public void assginRoleTestFail() {
		System.out.println("TEST STARTED: assginRoleTestFail()");
		Long org_id = null;
		Long user_id = null;
		try {
			org_id = doSetup(true);
			user_id = createUser(org_id);
			//call the assign user to role request using the wrong id
			String assign_role_response = assignRole(ASSIGN_ROLE_REQ.replace("%ID_USER%",user_id.toString()).replace("%ID_ROLE%",new Long(this.role_id+1).toString()));
			System.out.println("ASSIGN_ROLE_RESPONSE:");
			System.out.println(assign_role_response);	
			faliureAssertChecks(assign_role_response);
			//call the assign user to role request using the wrong id
			String assign_role_response_2 = assignRole(ASSIGN_ROLE_REQ.replace("%ID_USER%",new Long(user_id+1).toString()).replace("%ID_ROLE%",this.role_id.toString()));
			System.out.println("ASSIGN_ROLE_RESPONSE:");
			System.out.println(assign_role_response_2);	
			faliureAssertChecks(assign_role_response_2);
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			deleteOrgRecord(org_id);
			deleteUserRecord(DELETE_USER_REQ);
			System.out.println("TEST ENDED: assginRoleTestFail()");
		}
	}
	
}