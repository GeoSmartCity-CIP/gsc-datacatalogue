/*
 * Created on 18 dic 2015 ( Time 16:29:06 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package it.sinergis.datacatalogue.test.service;


import org.junit.Assert;
import org.junit.Test;

import com.fasterxml.jackson.databind.ObjectMapper;

import it.sinergis.datacatalogue.common.Constants;
import it.sinergis.datacatalogue.exception.DCException;
import it.sinergis.datacatalogue.services.OrganizationsService;
import it.sinergis.datacatalogue.services.ServiceCommons;

/**
 * JUnit test case for Gsc001Organization service
 * 
 * @author Telosys Tools Generator
 *
 */
public class OrganizationServiceTest extends ServiceCommons 
{
	
	/** Object Mapper. */
	private ObjectMapper om = new ObjectMapper();
	
	/** Service. */
	private OrganizationsService service = new OrganizationsService();

	//create request
	public static final String CREATE_ORG_REQ_1 = "{\"organizationname\":\"TestOrg\",\"description\":\"Create test succeed\"}";
	//create request for the update service test
	public static final String CREATE_ORG_REQ_2 = "{\"organizationname\":\"TestOrgForUpdate\",\"description\":\"When we update another record org name to this service fails.\"}";
	//delete request
	public static final String DELETE_ORG_REQ_1 = "{\"idorganization\":";
	//update request
	public static final String UPDATE_ORG_REQ_1 = "{\"organizationname\":\"TestOrg\",\"description\":\"Update test succeed\",\"idorganization\":";
	//Search request
	public static final String READ_ORG_REQ_1 = "{\"organizationname\":\"Test\"}";
	//request end
	public static final String REQ_END = "}";
	
	private void deleteRecord(Long id) {
		service.deleteOrganization(buildIdRequest(DELETE_ORG_REQ_1,id));
	}
	
	private String createRecord(String req) {
		return service.createOrganization(req);
	}
	
	private Long getRecordId(String response) throws NumberFormatException, DCException {
		return Long.parseLong(getFieldValueFromJsonText(response,Constants.ID_FIELD));
	}
	
	private String buildIdRequest(String reqBegin,Long id) {
		return reqBegin+id+REQ_END;
	}
	

	@Test
	public void createTest() {
		System.out.println("TEST STARTED: createTest()");
		Long create_id = null;
		try {
			//create a record
			String create_response = createRecord(CREATE_ORG_REQ_1);
			System.out.println(create_response);
			create_id = getRecordId(create_response);
			//check if response is a well formed json	
			om.readTree(create_response);
			//Assert the json response does not have an error field
			Assert.assertTrue(!create_response.contains("\"status\":\"error\""));
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted record)
			deleteRecord(create_id);
			System.out.println("TEST ENDED: createTest()");
		}
	}
	
	@Test
	public void createTestFail() {
		System.out.println("TEST STARTED: createTestFail()");
		Long create_id_base = null;
		try {
			//create a record
			String create_response_base = createRecord(CREATE_ORG_REQ_1);
			System.out.println(create_response_base);
			//get its id
			create_id_base = getRecordId(create_response_base);
			
			//Then try to create the same record again. Since no records can have the same name an error should be thrown
			String create_response = createRecord(CREATE_ORG_REQ_1);
			System.out.println(create_response);
					
			//check if response is a well formed json
			om.readTree(create_response);
			//Assert the json response has an error field
			Assert.assertTrue(create_response.contains("\"status\":\"error\""));
			
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted record)
			deleteRecord(create_id_base);
			System.out.println("TEST ENDED: createTestFail()");
		}
	}
	
	@Test
	public void updateTest() {
		System.out.println("TEST STARTED: updateTest()");
		Long create_id = null;
		try {
			//create a record
			String create_response = createRecord(CREATE_ORG_REQ_2);
			System.out.println(create_response);
			//get its id
			create_id = getRecordId(create_response);

			//Update the record
			String update_response = service.updateOrganization(buildIdRequest(UPDATE_ORG_REQ_1,create_id));
			//check if response is a well formed json	
			om.readTree(update_response);
			//Assert the json response does not have an error field
			Assert.assertTrue(!update_response.contains("\"status\":\"error\""));
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted record)
			deleteRecord(create_id);
			System.out.println("TEST ENDED: updateTest()");
		}
	}
	
	@Test
	public void updateTestFail() {
		System.out.println("TEST STARTED: updateTestFail()");
		Long create_id = null;
		try {
			//create a record
			String create_response = createRecord(CREATE_ORG_REQ_1);
			System.out.println(create_response);
			//get its id
			create_id = getRecordId(create_response);
			
			//try to update a non existing record (wrong id)
			String update_response = service.updateOrganization(buildIdRequest(UPDATE_ORG_REQ_1, create_id+1));
			System.out.println(update_response);
			//check if response is a well formed json	
			om.readTree(update_response);
			//Assert the json response has an error field
			Assert.assertTrue(update_response.contains("\"status\":\"error\""));	
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted record)
			deleteRecord(create_id);
			System.out.println("TEST ENDED: updateTestFail()");
		}
	}
	
	@Test
	public void updateTestFail2() {
		System.out.println("TEST STARTED: updateTestFail2()");
		Long create_id = null;
		Long create_id_2 = null;
		try {
			//create a record
			String create_response = createRecord(CREATE_ORG_REQ_1);
			System.out.println(create_response);
			//get its id
			create_id = getRecordId(create_response);
			
			//create anoter record
			String create_response_2 = createRecord(CREATE_ORG_REQ_2);
			System.out.println(create_response_2);
			//get its id
			create_id_2 = getRecordId(create_response_2);
			
			//try to update a record changing its name to one that is already in use
			String update_response = service.updateOrganization(buildIdRequest(UPDATE_ORG_REQ_1,getRecordId(create_response_2)));
			System.out.println(update_response);
			//check if response is a well formed json	
			om.readTree(update_response);
			//Assert the json response has an error field
			Assert.assertTrue(update_response.contains("\"status\":\"error\""));	
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted records)
			deleteRecord(create_id);
			deleteRecord(create_id_2);
			System.out.println("TEST ENDED: updateTestFail2()");
		}
	}
	
	@Test
	public void readTest() {
		Long create_id = null;
		try {
			//create a record
			String create_response = createRecord(CREATE_ORG_REQ_1);
			System.out.println(create_response);
			//get its id
			create_id = getRecordId(create_response);
			
			//read 
			String read_response = service.listOrganization(READ_ORG_REQ_1);
			System.out.println(read_response);
			//check if response is a well formed json	
			om.readTree(read_response);
			//Assert the json response does not have an error field
			Assert.assertTrue(!read_response.contains("\"status\":\"error\""));

		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted record)
			deleteRecord(create_id);
		}
	}
	
	@Test
	public void deleteTest() {
		Long create_id = null;
		try {
			//create a record
			String create_response = createRecord(CREATE_ORG_REQ_1);
			System.out.println(create_response);
			//get its id
			create_id = getRecordId(create_response);
			
			//First delete an existing record
			String delete_response = service.deleteOrganization(buildIdRequest(DELETE_ORG_REQ_1,create_id));
			System.out.println(delete_response);
			//check if response is a well formed json	
			om.readTree(delete_response);
			//Assert the json response does not have an error field
			Assert.assertTrue(!delete_response.contains("\"status\":\"error\""));
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted record)
			deleteRecord(create_id);
		}
	}
	
	@Test
	public void deleteTestFail() {
		Long create_id = null;
		try {
			//create a record
			String create_response = createRecord(CREATE_ORG_REQ_1);
			System.out.println(create_response);
			//get its id
			create_id = getRecordId(create_response);
			
			//try to delete a non existing record (wrong id)
			String delete_response = service.deleteOrganization(buildIdRequest(DELETE_ORG_REQ_1,create_id+1));
			System.out.println(delete_response);
			//check if response is a well formed json	
			om.readTree(delete_response);
			//Assert the json response has an error field
			Assert.assertTrue(delete_response.contains("\"status\":\"error\""));
						
		} catch (Exception e) {
			System.out.println(e);
			Assert.fail();
		} finally {
			//cleanup (delete the just inserted record)
			deleteRecord(create_id);
		}
	}
}